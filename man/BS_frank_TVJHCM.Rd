% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/BS_terminal_cpp_mis.R
\name{BS_frank_TVJHCM}
\alias{BS_frank_TVJHCM}
\title{#############################################################################################
########### This function simulates data taken from TVJHCM under Frank copula################
################and return BS for TVJHCM, JHCM estimated using Clayton copula ###############
############# to assess how misspecifying copula function will influence the results ########
#########################################input ##############################################
idx: index control simulation settings
n.sim: simuation random number}
\usage{
BS_frank_TVJHCM(idx, n.sim)
}
\arguments{
\item{idx}{n.sim}
}
\value{
BS in simulation when true data is from Clayton TVJHCM
}
\description{
#####the function for log likelihood function of the data########
\subsection{function argurments:}{

##b1: the parameter for x1 in the hazard funtion for the terminal event;
##b2: the parameter for x2 in the hazard funtion for the terminal event;
##b3: the parameter for x1 in the hazard funtion for the recurrent event;
##b4: the parameter for x2 in the hazard funtion for the recurrent event;
##b01, b02: baseline hazards for the terminal event and the recurrent events, respectively;
##phi: random effect term denoted as w in paper; {W_i}
##theta: correlation parameter for copula function; {theta_ij}
}

\subsection{Mu: theta_mu average level correlation}{

##x1, x2: two covariates in the hazard function for the terminal event and the recurrent event;
##y1, y2: observed time for the terminal event and the recurrent event;
##s1, s2: failing indicator for the terminal event and the recurrent event;
##id: subject id;
##N: the sample size of subjects;
}
}
\details{
##########  Output  ############
##bs_t: BS in TVJHCM
##bs_t_terminal:BS in JHCM
##bs_t_terminal_SF: BS in JFM
####################################################################
##########    usage ##############################
idx<-4
numCores <- 4
registerDoParallel(numCores)
nsim<-4
result<- foreach(n.sim=1:nsim,.errorhandling = "remove") \%dopar\% {
BS_TVJHCM(idx,n.sim)
}
saveRDS(result,paste0("400_WSF_",idx,".rds"))
}
